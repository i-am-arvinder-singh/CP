#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update

using namespace std;
using namespace __gnu_pbds;//which means policy based DS

//#define endl            "\n"
#define ll              long long
#define int             long long
#define ff              first
#define ss              second
#define fl(i,a,b)       for(int i=(int)a; i<(int)b; i++)
#define bfl(i,a,b)      for(int i=(int)a-1; i>=(int)b; i--)
#define pb              push_back
#define mp              make_pair
#define pii             pair<int,int>
#define vi              vector<int>
#define vt(type)        vector<type>
#define omniphantom     ios_base::sync_with_stdio(false);   cin.tie(NULL); cout.tie(NULL);
#define mii             map<int,int>
#define pqb             priority_queue<int>
//Below is implementation of min heap
#define pqs             priority_queue<int,vi,greater<int> >
#define setbits(x)      __builtin_popcountll(x)
#define zrobits(x)      __builtin_ctzll(x)
#define mod             1000000007
#define inf             1e18
#define ps(x,y)         fixed<<setprecision(y)<<x
#define mk(arr,n,type)  type *arr=new type[n];
#define w(x)            int x; cin>>x; while(x--)
#define pw(b,p)         pow(b,p) + 0.1
#define ini             const int
#define sz(v)           ((int)(v).size())
#define ppii            pair<int,pii>

const double pi = acos(-1.0);

typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

void solve()
{
    //Key observation in this problem:
    // If a>b
    // then --> a mod b < b mod a
    // as if a > b then definitely a mod b < b and  (( b = b mod a )) accurately!
    // above line was exploited to solve this problem. Code below #####
    int n;
    cin>>n;
    if(n==1){
        cout<<"! 1"<<endl;
        return;
    }
    set<int> s;
    set<int> seen;
    for(int i=1;i<=n;i++){
        s.insert(i);
        seen.insert(i);
    }
    vector<int> ans(n+1);
    vector<bool> mark(n+1);
    while(s.size()!=1){
        int a = *s.begin();
        s.erase(s.begin());
        int b = *s.begin();
        s.erase(s.begin());
        int v1,v2;
        cout<<"? "<<a<<" "<<b<<endl;
        cin>>v1;
        cout<<"? "<<b<<" "<<a<<endl;
        cin>>v2;
        if(v1<v2){
            ans[b]=v2;
            mark[b]=true;
            s.insert(a);
            seen.erase(v2);
        }
        else{
            ans[a]=v1;
            mark[a]=true;
            s.insert(b);
            seen.erase(v1);
        }
    }
    int val = *seen.begin();
    for(int i=1;i<=n;i++){
        if(!mark[i]){
            ans[i]=val;
            break;
        }
    }
    cout<<"! ";
    for(int i=1;i<=n;i++) cout<<ans[i]<<" ";
    cout<<endl;
}

int32_t main()
{
	omniphantom
	#if 0
	w(t)
	#endif // 0
    solve();
	return 0;
}

