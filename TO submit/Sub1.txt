#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update

using namespace std;
using namespace __gnu_pbds;//which means policy based DS

#define endl            "\n"
#define int             long long
#define ff              first
#define ss              second
#define fl(i,a,b)       for(int i=a; i<b; i++)
#define bfl(i,a,b)      for(int i=a-1; i>=b; i--)
#define pb              push_back
#define mp              make_pair
#define pii             pair<int,int>
#define vi              vector<int>
#define vt(type)        vector<type>
#define omniphantom     ios_base::sync_with_stdio(false);   cin.tie(NULL); cout.tie(NULL);
#define mii             map<int,int>
#define pqb             priority_queue<int>
//Below is implementation of min heap
#define pqs             priority_queue<int,vi,greater<int> >
#define setbits(x)      __builtin_popcountll(x)
#define zrobits(x)      __builtin_ctzll(x)
#define mod             1000000007
#define inf             1e18
#define ps(x,y)         fixed<<setprecision(y)<<x
#define mk(arr,n,type)  type *arr=new type[n];
#define w(x)            int x; cin>>x; while(x--)
#define pw(b,p)         pow(b,p) + 0.1
#define ini             const int
#define sz(v)           ((int)(v).size())
#define LEFT(n) (2*n)
#define RIGHT(n) (2*n+1)

typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

int power(int x, int y)
{
    int res = 1;
    while (y > 0)
    {
        if (y & 1)
            res = res*x;
        y = y>>1;
        x = x*x;
    }
    return res;
}

void solve()
{
    int s,k;
    cin>>s>>k;
    int cnt = 0;
    int ct=1;
    while(ct<k){
        int t = s;
        cnt =0;
        int mx=-inf,mn=inf;
        while(s!=0){
            s/=10;
            cnt++;
        }
        s=t;
        int h = 0;
        while(h<cnt){
            mx=max(mx,(s/power(10,h))%10);
            mn=min(mn,(s/power(10,h))%10);
//            s/=10;
            h++;
        }
//        cout<<"** "<<mn<<" "<<mx<<endl;
        if(mn==0){
            cout<<t<<endl;
            return;
        }
        t+=(mx*mn);
        s=t;
        ct++;
    }
    cout<<s<<endl;
}

int32_t main()
{
	omniphantom
	w(t) solve();
	return 0;
}
