#include<bits/stdc++.h>
using namespace std;

//#define endl            "\n"
#define int             long long
#define ff              first
#define ss              second
#define fl(i,a,b)       for(int i=a; i<b; i++)
#define bfl(i,a,b)      for(int i=a-1; i>=b; i--)
#define pb              insert
#define mp              make_pair
#define pii             pair<int,int>
#define vi              vector<int>
#define vt(type)        vector<type>
#define fio             ios_base::sync_with_stdio(false);   cin.tie(NULL); cout.tie(NULL);
#define mii             map<int,int>
#define pqb             priority_queue<int>
//Below is implementation of min heap
#define pqs             priority_queue<int,vi,greater<int> >
#define setbits(x)      __builtin_popcountll(x)
#define zrobits(x)      __builtin_ctzll(x)
#define mod             1000000007
#define inf             LLONG_MAX
#define ps(x,y)         fixed<<setprecision(y)<<x
#define mk(arr,n,type)  type *arr=new type[n];
#define w(x)            int x; cin>>x; while(x--)
#define pw(b,p)         pow(b,p) + 0.1
#define ini             const int
#define LEFT(n) (2*n)
#define RIGHT(n) (2*n+1)

ini mx = 1e5+5;
int fact[mx];

void init()
{
    fact[0]=1;
    fl(i,1,mx) fact[i]=(fact[i-1]*i)%mod;
}

int power(int x, int y)
{
    int res = 1;
    while (y > 0)
    {
        if (y & 1)
            res = res*x%mod;
        y = y>>1;
        x = x*x % mod;
        x%=mod;
        res%=mod;
    }
    return res%mod;
}

void solve()
{
    int n,sum=0,x;
    cin>>n;
    map<int,int> m;
    fl(i,0,2*n){
        cin>>x;
        m[x]++;
        sum+=x;
    }
    int check = sum/(n+1);
    if((sum%d)||(m.find(check)==m.end())||m[check]<2){
        cout<<0<<endl;
        continue;
    }
    
    m[check]-=2;
    int ans = fact[n-1];
    for(auto p:mp){
        int a = p.ff;
        int b = p.ss;
        
        if(b==0) continue;
        
        if(m.find(check-a)==m.end()||)
    }
}

int32_t main()
{
	fio;
	w(t) solve();
	return 0;
}
