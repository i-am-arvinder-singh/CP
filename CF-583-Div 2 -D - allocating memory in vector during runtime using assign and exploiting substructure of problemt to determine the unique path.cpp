#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update

using namespace std;
using namespace __gnu_pbds;//which means policy based DS

#define endl            "\n"
#define int             long long
#define ff              first
#define ss              second
#define fl(i,a,b)       for(int i=a; i<b; i++)
#define bfl(i,a,b)      for(int i=a-1; i>=b; i--)
#define pb              push_back
#define mp              make_pair
#define pii             pair<int,int>
#define vi              vector<int>
#define vt(type)        vector<type>
#define omniphantom     ios_base::sync_with_stdio(false);   cin.tie(NULL); cout.tie(NULL);
#define mii             map<int,int>
#define pqb             priority_queue<int>
//Below is implementation of min heap
#define pqs             priority_queue<int,vi,greater<int> >
#define setbits(x)      __builtin_popcountll(x)
#define zrobits(x)      __builtin_ctzll(x)
#define mod             1000000007
#define inf             1e18
#define ps(x,y)         fixed<<setprecision(y)<<x
#define mk(arr,n,type)  type *arr=new type[n];
#define w(x)            int x; cin>>x; while(x--)
#define pw(b,p)         pow(b,p) + 0.1
#define ini             const int
#define sz(v)           ((int)(v).size())
#define LEFT(n) (2*n)
#define RIGHT(n) (2*n+1)
#define ppii            pair<int,pii>

const double pi = acos(-1.0);

typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

int n,m;
ini mx = 1e6+5;

vt(vt(bool)) vis;
vt(vt(char)) s;

bool dfs(int i, int j)
{
    if(i==n && j==m) return true;
    if(!vis[i][j]) vis[i][j]=true;
    bool ans = false;
    if((i+1)<=n and !vis[i+1][j] and s[i+1][j]!='#') ans=ans||dfs(i+1,j);
    if((j+1)<=m and !vis[i][j+1] and s[i][j+1]!='#' and ans==false) ans=ans||dfs(i,j+1);
    return ans;
}

void solve()
{
    cin>>n>>m;
    vis.assign(n+1,vt(bool) (m+1,false));
    s.assign(n+1,vt(char) (m+1));
    fl(i,0,n) fl(j,0,m) cin>>s[i+1][j+1];
    int ans = 0;
    while(dfs(1,1)){
        vis[1][1]=vis[n][m]=false;
        ans++;
    }
    cout<<ans<<endl;
}

int32_t main()
{
	omniphantom
    solve();
	return 0;
}
